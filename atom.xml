<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Peng&#39;s blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-09-21T07:49:44.289Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>rxxy_Fvv</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python学习笔记</title>
    <link href="http://example.com/2021/09/21/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2021/09/21/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-09-21T07:40:21.000Z</published>
    <updated>2021-09-21T07:49:44.289Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PYthon"><a href="#PYthon" class="headerlink" title="PYthon"></a>PYthon</h1><h2 id="PYTHON基础数据类型"><a href="#PYTHON基础数据类型" class="headerlink" title="PYTHON基础数据类型"></a>PYTHON基础数据类型</h2><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><p>和我们生活中使用的整数一样<strong>1，2，3，4···100···</strong></p><p>都是整数，PYthon可以处理任意大小的整数。由于计算机使用的是二进制，所以在计算机中也常用二进制或者十六进制表示整数。相比十进制，python使用<strong>0b</strong>表示，比如0b0110，0b1100等来表示</p><p>十六进制除了0~9个是个数字以外，还使用了a,b,c,d,e,f在python中，十六进制使用前缀0x，比如：0x12ef,0x2365a4fa</p><p>十进制数，二进制数，十六进制数是可以互相转换的。</p><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p>浮点数也可以理解为我们日常生活中所谓的小数，例如3.1415926,13.14，5.20等等,都是所谓的浮点数。浮点数之所以被称之为小数，是因为按照科学计数法来表达的时候，浮点数和小数点位置是可变的（浮动的），比如：31415.926*10^-4和3141.5926 *10^-3是一样的，因此称之为浮点数.</p><p>浮点数可以用数学发写入，例如3.14,5.2,13.14等。但是对于很大或者很小的浮点数，就必须用科学技术法表示，把10用e替代，比如3.14e-5=0.0000314.</p><p>浮点数和整数在计算机内部存储的方式是不同的，整数运算永远是精确的，而浮点数运算则可能会有四舍五入的误差。例如在python环境中输入0.1+0.2</p><p><img src="D:\笔记\赛题笔记\img\image-20210417103234316.png" alt="image-20210417103234316"></p><p>然而输出的结果并不是0.3，但是0.01+0.02却可以精确的得到0.03</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串对应生活中的就是非数字型的内容，例如，一段话或者一个句子，在python中就是字符串，在python中字符串的定义就是被””或者’’括起来的内容，比如’rxxy’,”ysfx”等等。’’,””本身知识一种表达方式，并不是字符串的一部分，因此’rxxy’中只有r,x,x,y这四个字符，并没有’,’</p><p>例如print (‘hello python’)其中的字符串只是hello python。</p><h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><p>布尔值对应于生活中的就是’对’和’错’在计算机的世界里，大部分判断都是非错则对的，布尔值和布尔代数的表示完全一致，一个布尔值只有TRUE，FALSE两种值，不是TRUE就是FALSE，在Python也可以直接用TURE或者FALSE表示布尔值，请注意大小写，不要使用字符串括号括起来，也可以通过布尔运算计算出来。</p><p>布尔值可以用and，or，和not运送（注意and，or，not都是用Python语言本身的关键字）</p><p>**<code>and</code>**运算是与运算，只有所有都为 True，and运算结果才是 True。</p><p>**<code>or</code>**运算是或运算，只要其中有一个为 True，or 运算结果就是 True。</p><p>**<code>not</code>**运算是非运算，它是一个单目运算符，把 True 变成 False，False 变成 True。</p><h3 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h3><p>空值是Python里一个特殊的值，用<code>None</code>表示。</p><p>注意，<strong>None和0是不一样的</strong>，None不能理解为0，因为<strong>0是有意义</strong>的，比如我有0个苹果表示我没有苹果，0表达的是数值0的意思，而不能表示为我有None个苹果，None是一个特殊的空值。</p><h3 id="短路计算"><a href="#短路计算" class="headerlink" title="短路计算"></a>短路计算</h3><ol><li>在计算<code>a and b</code>时，如果 a 是 False，则根据与运算法则，整个结果必定为 False，因此返回 a；如果 a 是 True，则整个计算结果必定取决与 b，因此返回 b。<code>a and b  a假返回a，a真返回b</code></li><li>在计算<code>a or b</code>时，如果 a 是 True，则根据或运算法则，整个计算结果必定为 True，因此返回 a；如果 a 是 False，则整个计算结果必定取决于 b，因此返回 b。<code>a or b  a真返回b a假返回a</code></li></ol><p><strong>所以Python解释器在做布尔运算时，只要能提前确定计算结果，它就不会往后算了，直接返回结果。</strong></p><p>短路运算的核心思想：<br><strong>从左往右，只有当第一个操作数的值无法确定逻辑运算的结果时，才对第二个操作数进行求值</strong></p><p>Python运算符的优先级</p><p><img src="D:\笔记\赛题笔记\img\image-20210614142435984.png" alt="image-20210614142435984"></p><h3 id="raw字符串与多行字符串"><a href="#raw字符串与多行字符串" class="headerlink" title="raw字符串与多行字符串"></a>raw字符串与多行字符串</h3><p>如果一个字符串包含很多需要转义的字符，对每一个字符都进行转义回很麻烦，为了避免这一种情况，我们可以在字符串前面加个点缀<code>r</code>表示这是一个raw字符串，里面的字符就不需要转义了例如<code>r&#39;\(~_~)/ \(~_~)/&#39;</code>但是<code>r&quot;...&quot;</code>表示法不能表示多行字符串也不能表示包含<code>&#39;</code> <code>&quot;</code>的字符串如果要表示多行字符串可以用<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>表示:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;Line 1</span></span><br><span class="line"><span class="string">Line 2</span></span><br><span class="line"><span class="string">Line 3&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>还可以在多行字符串面前添加<code>r</code>把这个多行字符串变成一个<strong>raw字符串:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">r&#x27;&#x27;&#x27;Python is created by &quot;Guido&quot;.</span></span><br><span class="line"><span class="string">It is free and easy to learn.</span></span><br><span class="line"><span class="string">Let&#x27;s start learn Python in imooc!&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="format字符串"><a href="#format字符串" class="headerlink" title="format字符串"></a>format字符串</h3><p>字符串是Python程序重要的数据类型，到目前为止，我们输出的字符串的内容都是固定的，但有时候通过字符串输出的内容不是固定的，这个时候需要使用format来处理字符串，输出不固定的内容。<br>字符串format由两个部分组成，字符串模板和模板数据内容组成，通过大括号<code>&#123;&#125;</code>，就可以把模板数据内容嵌到字符串模板对应的位置。</p><p>如果模板中<code>&#123;&#125;</code>比较多，则容易错乱，那么在format的时候也可以指定模板数据内容的顺序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定顺序</span></span><br><span class="line">template = <span class="string">&#x27;Hello &#123;0&#125;, Hello &#123;1&#125;, Hello &#123;2&#125;, Hello &#123;3&#125;.&#x27;</span></span><br><span class="line">result = template.<span class="built_in">format</span>(<span class="string">&#x27;World&#x27;</span>, <span class="string">&#x27;China&#x27;</span>, <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;imooc&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment"># ==&gt; Hello World, Hello China, Hello Beijing, Hello imooc.</span></span><br><span class="line"><span class="comment"># 调整顺序</span></span><br><span class="line">template = <span class="string">&#x27;Hello &#123;3&#125;, Hello &#123;2&#125;, Hello &#123;1&#125;, Hello &#123;0&#125;.&#x27;</span></span><br><span class="line">result = template.<span class="built_in">format</span>(<span class="string">&#x27;World&#x27;</span>, <span class="string">&#x27;China&#x27;</span>, <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;imooc&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment"># ==&gt; Hello imooc, Hello Beijing, Hello China, Hello World.</span></span><br></pre></td></tr></table></figure><p>除了使用顺序，还可以指定对应的名字，使得在format过程更加清晰。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定&#123;&#125;的名字w,c,b,i</span></span><br><span class="line">template = <span class="string">&#x27;Hello &#123;w&#125;, Hello &#123;c&#125;, Hello &#123;b&#125;, Hello &#123;i&#125;.&#x27;</span></span><br><span class="line">world = <span class="string">&#x27;World&#x27;</span></span><br><span class="line">china = <span class="string">&#x27;China&#x27;</span></span><br><span class="line">beijing = <span class="string">&#x27;Beijing&#x27;</span></span><br><span class="line">imooc = <span class="string">&#x27;imooc&#x27;</span></span><br><span class="line"><span class="comment"># 指定名字对应的模板数据内容</span></span><br><span class="line">result = template.<span class="built_in">format</span>(w = world, c = china, b = beijing, i = imooc)</span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment"># ==&gt; Hello World, Hello China, Hello Beijing, Hello imooc.</span></span><br></pre></td></tr></table></figure><h3 id="python字符串切片"><a href="#python字符串切片" class="headerlink" title="python字符串切片"></a>python字符串切片</h3><p>字符串由一个个字符组成，每一个字符都有一个唯一的位置。比如字符串<code>&#39;ABC&#39;</code>，第一个字符是<code>A</code>，第二个字符是<code>B</code>，第三个字符是<code>C</code>。<br>因此我们可以使用位置的方式取出字符串中特定位置的字符，按照位置取字符串的方式使用中括号<code>[]</code>访问，这个时候可以把字符串看作是一个列表（一种新的数据类型，在后面会继续学习），<strong>不过需要注意的是，在程序的世界中，计数是从</strong><code>0</code><strong>开始的，使用</strong><code>0</code><strong>来表示第一个。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;ABC&#x27;</span></span><br><span class="line">a = s[<span class="number">0</span>] <span class="comment"># 第一个</span></span><br><span class="line">b = s[<span class="number">1</span>] <span class="comment"># 第二个</span></span><br><span class="line">c = s[<span class="number">2</span>] <span class="comment"># 第三个</span></span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># ==&gt; A</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment"># ==&gt; B</span></span><br><span class="line"><span class="built_in">print</span>(c) <span class="comment"># ==&gt; C</span></span><br></pre></td></tr></table></figure><p>有时候，我们会想获取字符串的一部分（子串），这个时候我们采取切片的方式获取，切片需要在中括号<code>[]</code>中填入两个数字，中间用冒号分开，表示子串的开始位置和结束位置，并且这是半闭半开区间，不包括最后的位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ab = s[<span class="number">0</span>:<span class="number">2</span>] <span class="comment"># 取字符串s中的第一个字符到第三个字符，不包括第三个字符</span></span><br><span class="line"><span class="built_in">print</span>(ab) <span class="comment"># ==&gt; AB</span></span><br></pre></td></tr></table></figure><p>我们定义一个更长的字符串，了解切片更多的细节。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;ABCDEFGHIJK&#x27;</span></span><br><span class="line">abcd = s[<span class="number">0</span>:<span class="number">4</span>] <span class="comment"># 取字符串s中的第一个字符到第五个字符，不包括第五个字符</span></span><br><span class="line"><span class="built_in">print</span>(abcd) <span class="comment"># ==&gt; ABCD</span></span><br><span class="line">cdef = s[<span class="number">2</span>:<span class="number">6</span>] <span class="comment"># 取字符串s中的第三个字符到第七个字符，不包括第七个字符</span></span><br><span class="line"><span class="built_in">print</span>(cdef) <span class="comment"># ==&gt; CDEF</span></span><br></pre></td></tr></table></figure><p>append()给一个list加入字符串 <strong>且一起只能加一个字符串,并且是从后往前加</strong></p><p>insert()添加一个字符串到list列表 可以选择添加的位置,例如<code>insert(2,&#39;coddy&#39;)</code>那就是将原本在2位置的字符串向后推移,而coddy则插入进去</p><p>pop()则是删除list表中的字符串</p><p>替换list表中的字符串则是L[需要替换的字符串的位置数]=’替换完的字符串’</p><h5 id="二维list"><a href="#二维list" class="headerlink" title="二维list"></a>二维list</h5><p>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b = [<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">c = [<span class="number">7</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">d = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">e = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">q = [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line">L = [a,b,c]</span><br><span class="line">K = [d,e,q] </span><br><span class="line">W = [L,K]   //同样可以一直套娃</span><br></pre></td></tr></table></figure><p>那么L则是二维list表,而读取二维list表则是</p><p><code>print(L[0][2])</code></p><p><strong>则是读取L列表中,第一个列表的第三个数</strong></p><p>set</p><p>list列表可以转换为set</p><p>set里面的元素不可以重复</p><p>add()添加元素，update()可以一次添加多个元素,也可以理解为更新</p><p>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8names = [&#x27;Alice&#x27;,&#x27;Bob&#x27;]names_set =  set(names)names_set.add(&#x27;Candy&#x27;)print (names_set)new_names= [&#x27;Jenny&#x27;, &#x27;Ellena&#x27;, &#x27;Alice&#x27;, &#x27;Candy&#x27;, &#x27;David&#x27;, &#x27;Hally&#x27;, &#x27;Bob&#x27;, &#x27;Isen&#x27;, &#x27;Karl&#x27;]names_set.update(new_names)print (names_set)</span></span><br></pre></td></tr></table></figure><p><strong>注意:set添加已经存在的元素并不会报错,但是也不会发生改变,因为set只保留一个相同的元素</strong></p><p>.remove()函数,如果set()里面没有这个元素,使用remove则会报错</p><p>.discard()函数,也是删除set()里面的元素,但是删除set()里面没有的元素并不会报错</p><p>clear()和dict中的clear()是一样的作用,为清空set(),注意clear是不能用在list里面的,同样tuple中也不能使用</p><p>set()中的判断是否重合或者超集和子集:</p><p>.issubset()参数是判断前者是否为括号中set()的子集</p><p>若为子集则得到true的值,若为否则得到false的值</p><p>.issuperset()参数是判断前者是否为括号中set的超集</p><p>若为超集则得到true的值,若为否则得到false的值</p><p>子集定义:前者的元素后者都有</p><p>超集定义:前者有后者的所有元素</p><p><strong>若两者完全相等,则互为对方的子集和超集</strong></p><p>而.isdisjoint()参数则是判断两者是否重合,或者两者是否拥有一样的元素,有则返回false,没有则返回true</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Enter a codes1 = set([1, 2, 3, 4, 5])s2 = set([1, 2, 3, 4, 5, 6, 7, 8, 9])print (s1.issubset(s2))print (s2.issubset(s1))print (s1.issuperset(s2))print (s2.issuperset(s1))print (s1.isdisjoint(s2))print (s2.isdisjoint(s1))if s2.isdisjoint(s1) != 1: #判断是否有重合,y    for a in s1:        if a in s2:            print a</span></span><br></pre></td></tr></table></figure><h3 id="Python文件操作"><a href="#Python文件操作" class="headerlink" title="Python文件操作"></a>Python文件操作</h3><p>文件读取方式:</p><ol><li><strong>read([size]):读取文件(读取size个字节 ,默认全部读取)</strong></li><li><strong>readline([size]):读取一行</strong></li><li><strong>readlines([size]):读取完文件，返回每一行所组成的列表</strong></li><li><strong>iter:使用迭代器读取文件</strong></li></ol><p>文件写入方式:</p><ol><li><strong>write(str):将字符串写入文件</strong></li><li><strong>writelines(sequence_of_strings):写多行到文件</strong></li></ol><p>写文件的过程</p><p><img src="D:\笔记\赛题笔记\img\image-20210807200611671.png" alt="image-20210807200611671"></p><p><strong>注释:当用Python编辑文件时,如果往文件内写入内容,输入的内容先进入程序的文件缓冲区,然后当关闭文件时,或者使用方法同步缓存,才会将文件缓冲区的内容写入磁盘.或者当写入的内容大于程序的写缓存,则直接写入磁盘</strong></p><p>Python写磁盘的时机:</p><ol><li><strong>主动调用close()或者flush()方法,写缓存同步到磁盘；</strong></li><li><strong>写入数据量大于或者等于写缓存，写缓存同步到磁盘；</strong></li></ol><p>文件打开方式</p><table><thead><tr><th><strong>mode</strong></th><th><strong>说明</strong></th><th><strong>文件必须存在</strong></th></tr></thead><tbody><tr><td><strong>‘r’</strong></td><td><strong>只读方式打开</strong></td><td><strong>文件必须存在</strong></td></tr><tr><td><strong>‘w’</strong></td><td><strong>只写方式打开</strong></td><td><strong>文件不存在创建文件文件存在则清空文件内容</strong></td></tr><tr><td><strong>‘a’</strong></td><td><strong>追加方式打卡</strong></td><td><strong>文件不存在创建文件</strong></td></tr><tr><td><strong>‘a+’</strong></td><td><strong>追加和读写方式打开</strong></td><td></td></tr><tr><td><strong>‘r+’/‘w+’</strong></td><td><strong>追加和读写方式打开</strong></td><td></td></tr></tbody></table><p><code>&#39;rb&#39;,&#39;wb&#39;,&#39;ab&#39;,&#39;rb+&#39;,&#39;wb+&#39;,&#39;ab+&#39;二进制方式打开</code></p><p>小知识:Python文件为什么要关闭</p><ol><li><strong>将写缓存同步到磁盘;</strong></li><li><strong>系统中每个进程打开文件的个数时有限的;(Linux线程打开文件数量限制 cat /proc/线程ID/limits )</strong></li><li><strong>如果打开文件数到了系统限制，再打开文件就会失败;</strong></li></ol><h2 id="Python中requests模块详解"><a href="#Python中requests模块详解" class="headerlink" title="Python中requests模块详解"></a>Python中requests模块详解</h2><p>首先<code>import requests</code> 导入模块</p><h4 id="然后就有基本的http请求方法"><a href="#然后就有基本的http请求方法" class="headerlink" title="然后就有基本的http请求方法"></a>然后就有基本的http请求方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requests.get(<span class="string">&#x27;http://www.baidu.com/&#x27;</span>)<span class="comment">#get请求requests.post(&#x27;http://www.baidu.com/&#x27;)#post请求requests.put(&#x27;http://www.baidu.com/&#x27;)#put请求requests.delete(&#x27;http://www.baidu.com/&#x27;)#delete请求requests.head(&#x27;http://www.baidu.com/&#x27;)#head请求requests.options(&#x27;http://www.baidu.com&#x27;)#options请求</span></span><br></pre></td></tr></table></figure><h4 id="发送请求的两种方式"><a href="#发送请求的两种方式" class="headerlink" title="发送请求的两种方式"></a>发送请求的两种方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = requests.get(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)<span class="comment">#最基本的不带参数的GET请求b = requests.get(url=&#x27;http://www.baidu.com&#x27;,params=&#123;&#x27;rxxy&#x27;:&#x27;python&#x27;&#125;)</span></span><br></pre></td></tr></table></figure><h4 id="给url传递参数"><a href="#给url传递参数" class="headerlink" title="给url传递参数"></a>给url传递参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asd_params = &#123;<span class="string">&#x27;key&#x27;</span>:<span class="string">&#x27;value&#x27;</span>&#125;<span class="comment">#字典传递参数,如果值位None的键不会被添加到url中r = requests.get(url=&#x27;http://www.baidu.com&#x27;,params = &#x27;asd&#x27;=&#x27;python&#x27;)</span></span><br></pre></td></tr></table></figure><h4 id="响应的内容"><a href="#响应的内容" class="headerlink" title="响应的内容"></a>响应的内容</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">r.encoding<span class="comment">#获取当前的编码</span></span><br><span class="line">r.encoding = <span class="string">&#x27;utf-8&#x27;</span><span class="comment">#设置编码</span></span><br><span class="line">r.text<span class="comment">#以encoding解析返回内容。字符串方式的响应体，会自动更具响应头部的字符编码进行解码</span></span><br><span class="line">r.content<span class="comment">#以字节形式(二进制)返回。字节方式的响应体，会自动为你解码gzip和deflate压缩</span></span><br><span class="line">r.headers <span class="comment">#以字典对象储存服务器响应头，但是这个字典比较特殊，字典键不区分大小写，若键不存在则返回None</span></span><br><span class="line">r.status_code<span class="comment">#响应状态码</span></span><br><span class="line">r.raw<span class="comment">#返回原始响应体，也就是urllib的response对象，使用r.raw.read()</span></span><br><span class="line">r.ok<span class="comment">#查看r.ok的布尔值便可以知道是否登陆成功</span></span><br><span class="line"><span class="comment">#*特殊方法*#</span></span><br><span class="line">r.json()<span class="comment">#Requests中内置的JSON解码器，以json形式返回，前提返回的内容确保是json格式的，不然解析出错会抛异常</span></span><br><span class="line">r.raise_for_status()<span class="comment">#失败请求(非200响应)抛出异常</span></span><br></pre></td></tr></table></figure><p>Http代理</p><p>代理设置:http/https</p><p>参数设置:proxies/</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;PYthon&quot;&gt;&lt;a href=&quot;#PYthon&quot; class=&quot;headerlink&quot; title=&quot;PYthon&quot;&gt;&lt;/a&gt;PYthon&lt;/h1&gt;&lt;h2 id=&quot;PYTHON基础数据类型&quot;&gt;&lt;a href=&quot;#PYTHON基础数据类型&quot; class=&quot;head</summary>
      
    
    
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/09/21/hello-world/"/>
    <id>http://example.com/2021/09/21/hello-world/</id>
    <published>2021-09-21T05:54:09.280Z</published>
    <updated>2021-09-21T05:54:09.281Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
